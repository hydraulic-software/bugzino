/*
 * This file is generated by jOOQ.
 */
package dev.hydraulic.bugzino.frontend.db.tables.records


import dev.hydraulic.bugzino.frontend.db.tables.TUsers

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TUsersRecord() : UpdatableRecordImpl<TUsersRecord>(TUsers.T_USERS), Record3<String?, String?, Long?> {

    open var email: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var dbUser: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<String?, String?, Long?> = super.fieldsRow() as Row3<String?, String?, Long?>
    override fun valuesRow(): Row3<String?, String?, Long?> = super.valuesRow() as Row3<String?, String?, Long?>
    override fun field1(): Field<String?> = TUsers.T_USERS.EMAIL
    override fun field2(): Field<String?> = TUsers.T_USERS.NAME
    override fun field3(): Field<Long?> = TUsers.T_USERS.DB_USER
    override fun component1(): String? = email
    override fun component2(): String? = name
    override fun component3(): Long? = dbUser
    override fun value1(): String? = email
    override fun value2(): String? = name
    override fun value3(): Long? = dbUser

    override fun value1(value: String?): TUsersRecord {
        this.email = value
        return this
    }

    override fun value2(value: String?): TUsersRecord {
        this.name = value
        return this
    }

    override fun value3(value: Long?): TUsersRecord {
        this.dbUser = value
        return this
    }

    override fun values(value1: String?, value2: String?, value3: Long?): TUsersRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised TUsersRecord
     */
    constructor(email: String? = null, name: String? = null, dbUser: Long? = null): this() {
        this.email = email
        this.name = name
        this.dbUser = dbUser
    }
}
