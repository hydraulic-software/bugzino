/*
 * This file is generated by jOOQ.
 */
package dev.hydraulic.bugzino.frontend.db.tables


import dev.hydraulic.bugzino.frontend.db.Public
import dev.hydraulic.bugzino.frontend.db.keys.T_PENDING_USER_REGISTRATIONS_PKEY
import dev.hydraulic.bugzino.frontend.db.tables.records.TPendingUserRegistrationsRecord

import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TPendingUserRegistrations(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TPendingUserRegistrationsRecord>?,
    aliased: Table<TPendingUserRegistrationsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TPendingUserRegistrationsRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>public.t_pending_user_registrations</code>
         */
        val T_PENDING_USER_REGISTRATIONS: TPendingUserRegistrations = TPendingUserRegistrations()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TPendingUserRegistrationsRecord> = TPendingUserRegistrationsRecord::class.java

    /**
     * The column <code>public.t_pending_user_registrations.email</code>.
     */
    val EMAIL: TableField<TPendingUserRegistrationsRecord, String?> = createField(DSL.name("email"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.t_pending_user_registrations.name</code>.
     */
    val NAME: TableField<TPendingUserRegistrationsRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.t_pending_user_registrations.code</code>.
     */
    val CODE: TableField<TPendingUserRegistrationsRecord, String?> = createField(DSL.name("code"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.t_pending_user_registrations.password</code>.
     */
    val PASSWORD: TableField<TPendingUserRegistrationsRecord, String?> = createField(DSL.name("password"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<TPendingUserRegistrationsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TPendingUserRegistrationsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.t_pending_user_registrations</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.t_pending_user_registrations</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.t_pending_user_registrations</code> table reference
     */
    constructor(): this(DSL.name("t_pending_user_registrations"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TPendingUserRegistrationsRecord>): this(Internal.createPathAlias(child, key), child, key, T_PENDING_USER_REGISTRATIONS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<TPendingUserRegistrationsRecord> = T_PENDING_USER_REGISTRATIONS_PKEY
    override fun `as`(alias: String): TPendingUserRegistrations = TPendingUserRegistrations(DSL.name(alias), this)
    override fun `as`(alias: Name): TPendingUserRegistrations = TPendingUserRegistrations(alias, this)
    override fun `as`(alias: Table<*>): TPendingUserRegistrations = TPendingUserRegistrations(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TPendingUserRegistrations = TPendingUserRegistrations(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TPendingUserRegistrations = TPendingUserRegistrations(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TPendingUserRegistrations = TPendingUserRegistrations(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<String?, String?, String?, String?> = super.fieldsRow() as Row4<String?, String?, String?, String?>

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
