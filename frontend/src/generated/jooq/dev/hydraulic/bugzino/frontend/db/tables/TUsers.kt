/*
 * This file is generated by jOOQ.
 */
package dev.hydraulic.bugzino.frontend.db.tables


import dev.hydraulic.bugzino.frontend.db.Public
import dev.hydraulic.bugzino.frontend.db.keys.T_USERS_PKEY
import dev.hydraulic.bugzino.frontend.db.tables.records.TUsersRecord

import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TUsers(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TUsersRecord>?,
    aliased: Table<TUsersRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TUsersRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.t_users</code>
         */
        val T_USERS: TUsers = TUsers()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TUsersRecord> = TUsersRecord::class.java

    /**
     * The column <code>public.t_users.email</code>.
     */
    val EMAIL: TableField<TUsersRecord, String?> = createField(DSL.name("email"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.t_users.name</code>.
     */
    val NAME: TableField<TUsersRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.t_users.db_user</code>.
     */
    val DB_USER: TableField<TUsersRecord, Long?> = createField(DSL.name("db_user"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<TUsersRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TUsersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.t_users</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.t_users</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.t_users</code> table reference
     */
    constructor(): this(DSL.name("t_users"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TUsersRecord>): this(Internal.createPathAlias(child, key), child, key, T_USERS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<TUsersRecord> = T_USERS_PKEY
    override fun `as`(alias: String): TUsers = TUsers(DSL.name(alias), this)
    override fun `as`(alias: Name): TUsers = TUsers(alias, this)
    override fun `as`(alias: Table<*>): TUsers = TUsers(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TUsers = TUsers(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TUsers = TUsers(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TUsers = TUsers(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<String?, String?, Long?> = super.fieldsRow() as Row3<String?, String?, Long?>

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, Long?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, Long?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
