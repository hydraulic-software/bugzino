/*
 * This file is generated by jOOQ.
 */
package dev.hydraulic.bugzino.frontend.db


import dev.hydraulic.bugzino.frontend.db.tables.TPendingUserRegistrations
import dev.hydraulic.bugzino.frontend.db.tables.TTicket
import dev.hydraulic.bugzino.frontend.db.tables.TUsers
import dev.hydraulic.bugzino.frontend.db.tables.Ticket

import kotlin.collections.List

import org.jooq.Catalog
import org.jooq.Table
import org.jooq.impl.SchemaImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Public : SchemaImpl("public", DefaultCatalog.DEFAULT_CATALOG) {
    public companion object {

        /**
         * The reference instance of <code>public</code>
         */
        val PUBLIC: Public = Public()
    }

    /**
     * The table <code>public.t_pending_user_registrations</code>.
     */
    val T_PENDING_USER_REGISTRATIONS: TPendingUserRegistrations get() = TPendingUserRegistrations.T_PENDING_USER_REGISTRATIONS

    /**
     * The table <code>public.t_ticket</code>.
     */
    val T_TICKET: TTicket get() = TTicket.T_TICKET

    /**
     * The table <code>public.t_users</code>.
     */
    val T_USERS: TUsers get() = TUsers.T_USERS

    /**
     * The table <code>public.ticket</code>.
     */
    val TICKET: Ticket get() = Ticket.TICKET

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getTables(): List<Table<*>> = listOf(
        TPendingUserRegistrations.T_PENDING_USER_REGISTRATIONS,
        TTicket.T_TICKET,
        TUsers.T_USERS,
        Ticket.TICKET
    )
}
