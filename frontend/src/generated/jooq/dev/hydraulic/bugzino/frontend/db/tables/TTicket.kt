/*
 * This file is generated by jOOQ.
 */
package dev.hydraulic.bugzino.frontend.db.tables


import dev.hydraulic.bugzino.frontend.db.Public
import dev.hydraulic.bugzino.frontend.db.keys.T_TICKET_PKEY
import dev.hydraulic.bugzino.frontend.db.tables.records.TTicketRecord

import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TTicket(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TTicketRecord>?,
    aliased: Table<TTicketRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TTicketRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.t_ticket</code>
         */
        val T_TICKET: TTicket = TTicket()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TTicketRecord> = TTicketRecord::class.java

    /**
     * The column <code>public.t_ticket.id</code>.
     */
    val ID: TableField<TTicketRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.t_ticket.title</code>.
     */
    val TITLE: TableField<TTicketRecord, String?> = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.t_ticket.description</code>.
     */
    val DESCRIPTION: TableField<TTicketRecord, String?> = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.t_ticket.assignee</code>.
     */
    val ASSIGNEE: TableField<TTicketRecord, String?> = createField(DSL.name("assignee"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<TTicketRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TTicketRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.t_ticket</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.t_ticket</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.t_ticket</code> table reference
     */
    constructor(): this(DSL.name("t_ticket"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TTicketRecord>): this(Internal.createPathAlias(child, key), child, key, T_TICKET, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<TTicketRecord, Int?> = super.getIdentity() as Identity<TTicketRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TTicketRecord> = T_TICKET_PKEY
    override fun `as`(alias: String): TTicket = TTicket(DSL.name(alias), this)
    override fun `as`(alias: Name): TTicket = TTicket(alias, this)
    override fun `as`(alias: Table<*>): TTicket = TTicket(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TTicket = TTicket(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TTicket = TTicket(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TTicket = TTicket(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<Int?, String?, String?, String?> = super.fieldsRow() as Row4<Int?, String?, String?, String?>

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, String?, String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, String?, String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
