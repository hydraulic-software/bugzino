/*
 * This file is generated by jOOQ.
 */
package dev.hydraulic.bugzino.frontend.db.tables.records


import dev.hydraulic.bugzino.frontend.db.tables.Ticket

import org.jooq.Field
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TicketRecord() : TableRecordImpl<TicketRecord>(Ticket.TICKET), Record4<Int?, String?, String?, String?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var title: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var description: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var assignee: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Int?, String?, String?, String?> = super.fieldsRow() as Row4<Int?, String?, String?, String?>
    override fun valuesRow(): Row4<Int?, String?, String?, String?> = super.valuesRow() as Row4<Int?, String?, String?, String?>
    override fun field1(): Field<Int?> = Ticket.TICKET.ID
    override fun field2(): Field<String?> = Ticket.TICKET.TITLE
    override fun field3(): Field<String?> = Ticket.TICKET.DESCRIPTION
    override fun field4(): Field<String?> = Ticket.TICKET.ASSIGNEE
    override fun component1(): Int? = id
    override fun component2(): String? = title
    override fun component3(): String? = description
    override fun component4(): String? = assignee
    override fun value1(): Int? = id
    override fun value2(): String? = title
    override fun value3(): String? = description
    override fun value4(): String? = assignee

    override fun value1(value: Int?): TicketRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): TicketRecord {
        this.title = value
        return this
    }

    override fun value3(value: String?): TicketRecord {
        this.description = value
        return this
    }

    override fun value4(value: String?): TicketRecord {
        this.assignee = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: String?): TicketRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised TicketRecord
     */
    constructor(id: Int? = null, title: String? = null, description: String? = null, assignee: String? = null): this() {
        this.id = id
        this.title = title
        this.description = description
        this.assignee = assignee
    }
}
